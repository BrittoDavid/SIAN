package Interfaces;

import Resources.ConnectionDB;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import org.jvnet.substance.SubstanceLookAndFeel;
import org.jvnet.substance.button.StandardButtonShaper;

/**
 *
 * @author unicuces
 */
public class gestion_logros extends javax.swing.JInternalFrame {

    DefaultTableModel modelo;
    Statement st;
    ResultSet rs;
    ConnectionDB BS;
    DefaultComboBoxModel modeloCombo = new DefaultComboBoxModel();
    DefaultComboBoxModel modeloCombo1 = new DefaultComboBoxModel();
    
    public gestion_logros() {
        JFrame.setDefaultLookAndFeelDecorated(true);
        SubstanceLookAndFeel.setSkin("org.jvnet.substance.skin.BusinessBlackSteelSkin");
        SubstanceLookAndFeel.setCurrentTheme("org.jvnet.substance.theme.SubstanceAquaTheme");
        initComponents();
        timer.scheduleAtFixedRate(gestionarMateria, 1, 1, TimeUnit.SECONDS.SECONDS);
        this.btn_cre.putClientProperty(SubstanceLookAndFeel.BUTTON_SHAPER_PROPERTY, new StandardButtonShaper());
        BS = new ConnectionDB();
        txt_id_log.setEditable(false);
        txa_des.setLineWrap(true);
        this.setSize(603,631);
        loadAchievement();
        fillInSubject();
        fillinPeriod();
        loadtable();
        if (Login.lenguaje == 1) {
            jLabel1.setText("ACHIEVEMENTS");
            lbl_id_log.setText("ACHIEVEMENT ID");
            lbl_id_mat.setText("SUBJECT");
            lbl_per.setText("PERIOD ID");
            lbl_por.setText("PORCENTAGE");
            lbl_mat.setText("SUBJECT");
            lbl_des.setText("DESCRIPTION");
            btn_cre.setText("CREATE");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        UPDATE = new javax.swing.JMenuItem();
        REMOVE = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btn_cre = new javax.swing.JButton();
        btn_Act = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbl_log = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        txt_id_log = new javax.swing.JTextField();
        cmb_id_mat = new javax.swing.JComboBox();
        cmb_id_per = new javax.swing.JComboBox();
        spn_por = new javax.swing.JSpinner();
        txt_log = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txa_des = new javax.swing.JTextArea();
        lbl_id_log = new javax.swing.JLabel();
        lbl_id_mat = new javax.swing.JLabel();
        lbl_per = new javax.swing.JLabel();
        lbl_por = new javax.swing.JLabel();
        lbl_mat = new javax.swing.JLabel();
        lbl_des = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        UPDATE.setText("ACTUALIZAR");
        UPDATE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UPDATEActionPerformed(evt);
            }
        });
        jPopupMenu1.add(UPDATE);

        REMOVE.setText("ELIMINAR");
        REMOVE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                REMOVEActionPerformed(evt);
            }
        });
        jPopupMenu1.add(REMOVE);

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 102, 156));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setBackground(new java.awt.Color(51, 153, 255));
        jLabel1.setFont(new java.awt.Font("Lucida Sans Unicode", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("LOGROS");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, -1));

        btn_cre.setBackground(new java.awt.Color(140, 217, 238));
        btn_cre.setText("CREAR");
        btn_cre.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        btn_cre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_creActionPerformed(evt);
            }
        });
        getContentPane().add(btn_cre, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 540, 350, 50));

        btn_Act.setBackground(new java.awt.Color(140, 217, 238));
        btn_Act.setText("ACTUALIZAR");
        btn_Act.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        btn_Act.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ActActionPerformed(evt);
            }
        });
        getContentPane().add(btn_Act, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 540, 350, 50));

        tbl_log.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbl_log.setComponentPopupMenu(jPopupMenu1);
        jScrollPane3.setViewportView(tbl_log);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 570, 140));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(null);
        jPanel2.add(txt_id_log);
        txt_id_log.setBounds(130, 11, 250, 30);

        jPanel2.add(cmb_id_mat);
        cmb_id_mat.setBounds(130, 50, 250, 30);

        cmb_id_per.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_id_perActionPerformed(evt);
            }
        });
        jPanel2.add(cmb_id_per);
        cmb_id_per.setBounds(130, 90, 250, 30);

        spn_por.setModel(new javax.swing.SpinnerNumberModel(1.0d, 1.0d, 100.0d, 1.0d));
        jPanel2.add(spn_por);
        spn_por.setBounds(130, 130, 250, 30);
        jPanel2.add(txt_log);
        txt_log.setBounds(130, 170, 250, 30);

        txa_des.setColumns(5);
        txa_des.setRows(5);
        txa_des.setSelectedTextColor(new java.awt.Color(140, 217, 238));
        jScrollPane1.setViewportView(txa_des);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(130, 210, 250, 64);

        lbl_id_log.setFont(new java.awt.Font("Lucida Sans Unicode", 1, 13)); // NOI18N
        lbl_id_log.setForeground(new java.awt.Color(51, 153, 255));
        lbl_id_log.setText("PERIODO");
        jPanel2.add(lbl_id_log);
        lbl_id_log.setBounds(20, 90, 96, 21);

        lbl_id_mat.setFont(new java.awt.Font("Lucida Sans Unicode", 1, 13)); // NOI18N
        lbl_id_mat.setForeground(new java.awt.Color(51, 153, 255));
        lbl_id_mat.setText("MATERIA");
        jPanel2.add(lbl_id_mat);
        lbl_id_mat.setBounds(20, 50, 72, 21);

        lbl_per.setFont(new java.awt.Font("Lucida Sans Unicode", 1, 13)); // NOI18N
        lbl_per.setForeground(new java.awt.Color(51, 153, 255));
        lbl_per.setText("ID_LOGRO");
        jPanel2.add(lbl_per);
        lbl_per.setBounds(20, 10, 90, 20);

        lbl_por.setFont(new java.awt.Font("Lucida Sans Unicode", 1, 13)); // NOI18N
        lbl_por.setForeground(new java.awt.Color(51, 153, 255));
        lbl_por.setText("PORCENTAGE");
        jPanel2.add(lbl_por);
        lbl_por.setBounds(20, 130, 110, 21);

        lbl_mat.setFont(new java.awt.Font("Lucida Sans Unicode", 1, 13)); // NOI18N
        lbl_mat.setForeground(new java.awt.Color(51, 153, 255));
        lbl_mat.setText("MATERIA");
        jPanel2.add(lbl_mat);
        lbl_mat.setBounds(20, 170, 70, 21);

        lbl_des.setFont(new java.awt.Font("Lucida Sans Unicode", 1, 13)); // NOI18N
        lbl_des.setForeground(new java.awt.Color(51, 153, 255));
        lbl_des.setText("DESCRIPCION");
        jPanel2.add(lbl_des);
        lbl_des.setBounds(20, 210, 120, 21);

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, 410, 280));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/fondoDaza.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        jLabel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 70, 610, 530));

        pack();
    }// </editor-fold>//GEN-END:initComponents
final Runnable gestionarMateria = new Runnable() {
        public void run() {
            recargar();
        }
    };
    ScheduledExecutorService timer = Executors.newSingleThreadScheduledExecutor();

    int guardar = gention_materias.num;
    public void recargar() {
        if (gention_materias.num > guardar) {
            cmb_id_mat.removeAllItems();
            guardar=gention_materias.num;
            fillInSubject();
        }
    }
    private void btn_creActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_creActionPerformed
        int contador = 0;
        int cont = cmb_id_mat.getSelectedIndex();
        if (cont != 0) {
            contador += 1;
        } else {
            if (Login.lenguaje == 1) {
                String[] options = {"acep"};
                JOptionPane.showOptionDialog(this, "CHOOSE A MATTER", "accept", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);

            } else {
                JOptionPane.showMessageDialog(this, "ELIGE UNA MATERIA");
            }
        }
        cont = cmb_id_per.getSelectedIndex();
        if (cont != 0) {
            contador += 1;
        } else {
            JOptionPane.showMessageDialog(this, "ELIGE UN PERIODO");
        }
        cont = txt_log.getText().length();
        if (cont != 0) {
            contador += 1;
        } else {
            JOptionPane.showMessageDialog(this, "INGRESA TIPO DE LOGRO");
        }
        cont = txa_des.getText().length();
        if (cont != 0) {
            contador += 1;
        } else {
            JOptionPane.showMessageDialog(this, "INGRESA UNA DESCRIPCION");
        }
        if (contador == 4) {
            int totalCampo = 0;
            try {
                rs = BS.queryDB("SELECT COUNT(ID_ACHIEVEMENT) FROM ACHIEVEMENT");
                while (rs.next()) {
                    totalCampo = Integer.parseInt(rs.getString("COUNT(ID_ACHIEVEMENT)"));
                }

            } catch (SQLException ex) {
                Logger.getLogger(gestion_logros.class.getName()).log(Level.SEVERE, null, ex);
            }
            int codigo;
            String descripcion, nombPeriodo = null, nombMateria = null;
            codigo = Integer.parseInt(txt_id_log.getText());
            String materia = (String) cmb_id_mat.getSelectedItem();
            String periodo = (String) cmb_id_per.getSelectedItem();
            double porcentage = (double) spn_por.getValue();
            descripcion = txa_des.getText();
            String tipoLogro = txt_log.getText();
            try {
                rs = BS.queryDB("SELECT ID_PERIOD FROM period where NAME_PERIOD='" + periodo + "'");
                while (rs.next()) {
                    nombPeriodo = rs.getString("ID_PERIOD");
                }

            } catch (SQLException ex) {
                Logger.getLogger(gestion_logros.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs = BS.queryDB("SELECT ID_SUBJECT FROM SUBJECT where NAME_SUBJECT='" + materia + "'");
                while (rs.next()) {
                    nombMateria = rs.getString("ID_SUBJECT");
                }

            } catch (SQLException ex) {
                Logger.getLogger(gestion_logros.class.getName()).log(Level.SEVERE, null, ex);
            }

            String Periodo = nombPeriodo;
            String Materia = nombMateria;

            BS.updateDB("INSERT INTO `achievement`\n"
                    + "(`ID_ACHIEVEMENT`, `ID_SUBJECT`, `ID_PERIOD`, `PORCENTAGE`, `DESCRIPTION`, `TYPE_ACHIEVEMENTS`) \n"
                    + "VALUES(" + codigo + "," + Materia + "," + Periodo + "," + porcentage + ",'" + descripcion + "','" + tipoLogro + "')");
            int totalCampo2 = 0;

            try {
                rs = BS.queryDB("SELECT COUNT(ID_ACHIEVEMENT) FROM ACHIEVEMENT");
                while (rs.next()) {
                    totalCampo2 = Integer.parseInt(rs.getString("COUNT(ID_ACHIEVEMENT)"));
                }
            } catch (SQLException ex) {
                Logger.getLogger(gestion_logros.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (totalCampo2 > totalCampo) {
                JOptionPane.showMessageDialog(this, "creado correctamente");
                reiniciar();
            } else {
                JOptionPane.showMessageDialog(this, "creado incorrectamente");
            }
        }
        loadtable();
    }//GEN-LAST:event_btn_creActionPerformed

    private void cmb_id_perActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_id_perActionPerformed
        
    }//GEN-LAST:event_cmb_id_perActionPerformed

    private void REMOVEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_REMOVEActionPerformed
                if (tbl_log.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(rootPane, "Debes seleccionar una fila");

        } else {
            int confirm = JOptionPane.showConfirmDialog(rootPane, "Desea eliminar el registro?");
            if (confirm == 0) {
                String achievementCode = (String) modelo.getValueAt(tbl_log.getSelectedRow(), 0);
                BS.updateDB("DELETE FROM achievement WHERE ID_ACHIEVEMENT=" + achievementCode);
                loadtable();
            }
        }
    }//GEN-LAST:event_REMOVEActionPerformed

    private void UPDATEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UPDATEActionPerformed
        if (tbl_log.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(rootPane, "Debes seleccionar una fila");

        } else {
            String achievementCode = (String) modelo.getValueAt(tbl_log.getSelectedRow(), 0);
            btn_cre.setVisible(false);
            btn_Act.setVisible(true);
            try {
                rs = BS.queryDB("SELECT * FROM achievement WHERE ID_ACHIEVEMENT=" + achievementCode);
                if (rs.next()) {
                    txt_id_log.setText((rs.getInt("ID_ACHIEVEMENT") + ""));
                    spn_por.setValue((rs.getInt("PORCENTAGE") + ""));
                    txt_log.setText((rs.getString("TYPE_ACHIEVEMENTS")));
                    txa_des.setText((rs.getString("DESCRIPTION")));
                
                }
            } catch (SQLException ex) {
                Logger.getLogger(gention_materias.class.getName()).log(Level.SEVERE, null, ex);
            }
            loadtable();
        }
    }//GEN-LAST:event_UPDATEActionPerformed

    private void btn_ActActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ActActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_ActActionPerformed

    public void loadAchievement() {
        try {
            rs = BS.queryDB("SELECT MAX(ID_ACHIEVEMENT) FROM achievement");
            if (rs.next()) {
                txt_id_log.setText((rs.getInt("MAX(ID_ACHIEVEMENT)") + 1) + "");
            }
        } catch (SQLException ex) {
            Logger.getLogger(gestion_logros.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void loadtable(){
               String titulos[] = new String[6];
        if (Login.lenguaje == 1) {
            titulos[0] = "ID";
            titulos[1] = "MATER";
            titulos[2] = "PERIOD";
            titulos[3] = "PORCENTAGE";
            titulos[4] = "MATER";
            titulos[5] = "DESCRIPTION";        
        
        }else{
            titulos[0] = "ID";
            titulos[1] = "MATERIA";
            titulos[2] = "PERIODO";
            titulos[3] = "PORCENTAJE";
            titulos[4] = "MATERIA";
            titulos[5] = "DESCRIPCION";
        }
        modelo = new DefaultTableModel(null, titulos);
        String fila[] = new String[8];
         
           try {
            ResultSet rs = BS.queryDB("SELECT a.ID_ACHIEVEMENT,s.NAME_SUBJECT,p.NAME_PERIOD,a.PORCENTAGE,a.DESCRIPTION,a.TYPE_ACHIEVEMENTS FROM achievement a LEFT JOIN subject s ON s.ID_SUBJECT = a.ID_SUBJECT INNER JOIN period p ON a.ID_PERIOD = p.ID_PERIOD");
            while (rs.next()) {
                fila[0] = rs.getString("ID_ACHIEVEMENT");
                fila[1] = rs.getString("NAME_SUBJECT");
                fila[2] = rs.getString("NAME_PERIOD");
                fila[3] = rs.getString("PORCENTAGE");
                fila[4] = rs.getString("TYPE_ACHIEVEMENTS");
                fila[5] = rs.getString("DESCRIPTION");
                modelo.addRow(fila);
               }
                tbl_log.setModel(modelo);
       } catch (SQLException ex) {
           System.out.println("Error" + ex);
        }
    }
    public void fillInSubject() {
        try {
            rs = BS.queryDB("SELECT NAME_SUBJECT FROM subject");
            if (Login.lenguaje == 1) {
                modeloCombo.addElement("matter");
            } else {
                modeloCombo.addElement("MATERIA");
            }
            cmb_id_mat.setModel(modeloCombo);
            while (rs.next()) {
                modeloCombo.addElement(rs.getObject("NAME_SUBJECT"));
                cmb_id_mat.setModel(modeloCombo);
            }
        } catch (SQLException ex) {
            Logger.getLogger(gestion_logros.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void fillinPeriod() {
        try {
            rs = BS.queryDB("SELECT NAME_PERIOD FROM period");
            if (Login.lenguaje == 1) {
                modeloCombo1.addElement("PERIOD");
            } else {
                modeloCombo1.addElement("PERIODO");
            }
            cmb_id_per.setModel(modeloCombo1);
            while (rs.next()) {
                modeloCombo1.addElement(rs.getObject("NAME_PERIOD"));
                cmb_id_per.setModel(modeloCombo1);
            }

        } catch (SQLException ex) {
            Logger.getLogger(gestion_logros.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void reiniciar() {
        loadAchievement();
        cmb_id_mat.setSelectedIndex(0);
        cmb_id_per.setSelectedIndex(0);
        spn_por.setValue(1.0);
        txt_log.setText("");
        txa_des.setText("");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem REMOVE;
    private javax.swing.JMenuItem UPDATE;
    private javax.swing.JButton btn_Act;
    private javax.swing.JButton btn_cre;
    private javax.swing.JComboBox cmb_id_mat;
    private javax.swing.JComboBox cmb_id_per;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbl_des;
    private javax.swing.JLabel lbl_id_log;
    private javax.swing.JLabel lbl_id_mat;
    private javax.swing.JLabel lbl_mat;
    private javax.swing.JLabel lbl_per;
    private javax.swing.JLabel lbl_por;
    private javax.swing.JSpinner spn_por;
    private javax.swing.JTable tbl_log;
    private javax.swing.JTextArea txa_des;
    private javax.swing.JTextField txt_id_log;
    private javax.swing.JTextField txt_log;
    // End of variables declaration//GEN-END:variables
}
